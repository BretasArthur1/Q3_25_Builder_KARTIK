/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const MEMBER_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  173, 25, 100, 97, 192, 177, 84, 139,
]);

export function getMemberAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MEMBER_ACCOUNT_DISCRIMINATOR
  );
}

export type MemberAccount = {
  discriminator: ReadonlyUint8Array;
  cycle: Address;
  member: Address;
  contributionsMade: number;
  payoutReceived: boolean;
  collateral: bigint;
  isActive: boolean;
  bump: number;
};

export type MemberAccountArgs = {
  cycle: Address;
  member: Address;
  contributionsMade: number;
  payoutReceived: boolean;
  collateral: number | bigint;
  isActive: boolean;
  bump: number;
};

export function getMemberAccountEncoder(): FixedSizeEncoder<MemberAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['cycle', getAddressEncoder()],
      ['member', getAddressEncoder()],
      ['contributionsMade', getU8Encoder()],
      ['payoutReceived', getBooleanEncoder()],
      ['collateral', getU64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MEMBER_ACCOUNT_DISCRIMINATOR })
  );
}

export function getMemberAccountDecoder(): FixedSizeDecoder<MemberAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['cycle', getAddressDecoder()],
    ['member', getAddressDecoder()],
    ['contributionsMade', getU8Decoder()],
    ['payoutReceived', getBooleanDecoder()],
    ['collateral', getU64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getMemberAccountCodec(): FixedSizeCodec<
  MemberAccountArgs,
  MemberAccount
> {
  return combineCodec(getMemberAccountEncoder(), getMemberAccountDecoder());
}

export function decodeMemberAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MemberAccount, TAddress>;
export function decodeMemberAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MemberAccount, TAddress>;
export function decodeMemberAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MemberAccount, TAddress> | MaybeAccount<MemberAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMemberAccountDecoder()
  );
}

export async function fetchMemberAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MemberAccount, TAddress>> {
  const maybeAccount = await fetchMaybeMemberAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMemberAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MemberAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMemberAccount(maybeAccount);
}

export async function fetchAllMemberAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MemberAccount>[]> {
  const maybeAccounts = await fetchAllMaybeMemberAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMemberAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MemberAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMemberAccount(maybeAccount));
}

export function getMemberAccountSize(): number {
  return 84;
}
