/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CYCLE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  229, 25, 75, 221, 155, 111, 145, 44,
]);

export function getCycleAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CYCLE_ACCOUNT_DISCRIMINATOR
  );
}

export type CycleAccount = {
  discriminator: ReadonlyUint8Array;
  organizer: Address;
  tokenMint: Address;
  amountPerUser: bigint;
  maxParticipants: number;
  currentParticipants: number;
  organizerFeeBps: number;
  isActive: boolean;
  contributionInterval: bigint;
  contributionsPerPayout: number;
  roundCount: number;
  createdAt: bigint;
  currentRound: number;
  nextRoundTime: bigint;
  payoutOrder: Array<Address>;
  organizerStake: bigint;
  potAmount: bigint;
  payoutAmount: bigint;
  slashedStakes: bigint;
  nonces: number;
  bump: number;
};

export type CycleAccountArgs = {
  organizer: Address;
  tokenMint: Address;
  amountPerUser: number | bigint;
  maxParticipants: number;
  currentParticipants: number;
  organizerFeeBps: number;
  isActive: boolean;
  contributionInterval: number | bigint;
  contributionsPerPayout: number;
  roundCount: number;
  createdAt: number | bigint;
  currentRound: number;
  nextRoundTime: number | bigint;
  payoutOrder: Array<Address>;
  organizerStake: number | bigint;
  potAmount: number | bigint;
  payoutAmount: number | bigint;
  slashedStakes: number | bigint;
  nonces: number;
  bump: number;
};

export function getCycleAccountEncoder(): Encoder<CycleAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['organizer', getAddressEncoder()],
      ['tokenMint', getAddressEncoder()],
      ['amountPerUser', getU64Encoder()],
      ['maxParticipants', getU8Encoder()],
      ['currentParticipants', getU8Encoder()],
      ['organizerFeeBps', getU16Encoder()],
      ['isActive', getBooleanEncoder()],
      ['contributionInterval', getI64Encoder()],
      ['contributionsPerPayout', getU8Encoder()],
      ['roundCount', getU8Encoder()],
      ['createdAt', getI64Encoder()],
      ['currentRound', getU8Encoder()],
      ['nextRoundTime', getI64Encoder()],
      ['payoutOrder', getArrayEncoder(getAddressEncoder())],
      ['organizerStake', getU64Encoder()],
      ['potAmount', getU64Encoder()],
      ['payoutAmount', getU64Encoder()],
      ['slashedStakes', getU64Encoder()],
      ['nonces', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CYCLE_ACCOUNT_DISCRIMINATOR })
  );
}

export function getCycleAccountDecoder(): Decoder<CycleAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['organizer', getAddressDecoder()],
    ['tokenMint', getAddressDecoder()],
    ['amountPerUser', getU64Decoder()],
    ['maxParticipants', getU8Decoder()],
    ['currentParticipants', getU8Decoder()],
    ['organizerFeeBps', getU16Decoder()],
    ['isActive', getBooleanDecoder()],
    ['contributionInterval', getI64Decoder()],
    ['contributionsPerPayout', getU8Decoder()],
    ['roundCount', getU8Decoder()],
    ['createdAt', getI64Decoder()],
    ['currentRound', getU8Decoder()],
    ['nextRoundTime', getI64Decoder()],
    ['payoutOrder', getArrayDecoder(getAddressDecoder())],
    ['organizerStake', getU64Decoder()],
    ['potAmount', getU64Decoder()],
    ['payoutAmount', getU64Decoder()],
    ['slashedStakes', getU64Decoder()],
    ['nonces', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getCycleAccountCodec(): Codec<CycleAccountArgs, CycleAccount> {
  return combineCodec(getCycleAccountEncoder(), getCycleAccountDecoder());
}

export function decodeCycleAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CycleAccount, TAddress>;
export function decodeCycleAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CycleAccount, TAddress>;
export function decodeCycleAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CycleAccount, TAddress> | MaybeAccount<CycleAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCycleAccountDecoder()
  );
}

export async function fetchCycleAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CycleAccount, TAddress>> {
  const maybeAccount = await fetchMaybeCycleAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCycleAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CycleAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCycleAccount(maybeAccount);
}

export async function fetchAllCycleAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CycleAccount>[]> {
  const maybeAccounts = await fetchAllMaybeCycleAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCycleAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CycleAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCycleAccount(maybeAccount));
}
