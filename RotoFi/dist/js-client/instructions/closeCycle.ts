/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ROTOFI_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_CYCLE_DISCRIMINATOR = new Uint8Array([
  230, 120, 116, 239, 41, 4, 44, 103,
]);

export function getCloseCycleDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLOSE_CYCLE_DISCRIMINATOR);
}

export type CloseCycleInstruction<
  TProgram extends string = typeof ROTOFI_PROGRAM_ADDRESS,
  TAccountOrganizer extends string | AccountMeta<string> = string,
  TAccountCycle extends string | AccountMeta<string> = string,
  TAccountOrganizerAccount extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountCycleTokenAccount extends string | AccountMeta<string> = string,
  TAccountOrganizerTokenAccount extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | AccountMeta<string> = string,
  TAccountRecipient extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOrganizer extends string
        ? WritableSignerAccount<TAccountOrganizer> &
            AccountSignerMeta<TAccountOrganizer>
        : TAccountOrganizer,
      TAccountCycle extends string
        ? WritableAccount<TAccountCycle>
        : TAccountCycle,
      TAccountOrganizerAccount extends string
        ? WritableAccount<TAccountOrganizerAccount>
        : TAccountOrganizerAccount,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountCycleTokenAccount extends string
        ? WritableAccount<TAccountCycleTokenAccount>
        : TAccountCycleTokenAccount,
      TAccountOrganizerTokenAccount extends string
        ? WritableAccount<TAccountOrganizerTokenAccount>
        : TAccountOrganizerTokenAccount,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountRecipient extends string
        ? WritableAccount<TAccountRecipient>
        : TAccountRecipient,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseCycleInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseCycleInstructionDataArgs = {};

export function getCloseCycleInstructionDataEncoder(): FixedSizeEncoder<CloseCycleInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_CYCLE_DISCRIMINATOR })
  );
}

export function getCloseCycleInstructionDataDecoder(): FixedSizeDecoder<CloseCycleInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseCycleInstructionDataCodec(): FixedSizeCodec<
  CloseCycleInstructionDataArgs,
  CloseCycleInstructionData
> {
  return combineCodec(
    getCloseCycleInstructionDataEncoder(),
    getCloseCycleInstructionDataDecoder()
  );
}

export type CloseCycleAsyncInput<
  TAccountOrganizer extends string = string,
  TAccountCycle extends string = string,
  TAccountOrganizerAccount extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountCycleTokenAccount extends string = string,
  TAccountOrganizerTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountRecipient extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  organizer: TransactionSigner<TAccountOrganizer>;
  cycle: Address<TAccountCycle>;
  organizerAccount?: Address<TAccountOrganizerAccount>;
  memberAccount?: Address<TAccountMemberAccount>;
  cycleTokenAccount: Address<TAccountCycleTokenAccount>;
  organizerTokenAccount: Address<TAccountOrganizerTokenAccount>;
  recipientTokenAccount?: Address<TAccountRecipientTokenAccount>;
  recipient: Address<TAccountRecipient>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCloseCycleInstructionAsync<
  TAccountOrganizer extends string,
  TAccountCycle extends string,
  TAccountOrganizerAccount extends string,
  TAccountMemberAccount extends string,
  TAccountCycleTokenAccount extends string,
  TAccountOrganizerTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountRecipient extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ROTOFI_PROGRAM_ADDRESS,
>(
  input: CloseCycleAsyncInput<
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountMemberAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseCycleInstruction<
    TProgramAddress,
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountMemberAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? ROTOFI_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    organizer: { value: input.organizer ?? null, isWritable: true },
    cycle: { value: input.cycle ?? null, isWritable: true },
    organizerAccount: {
      value: input.organizerAccount ?? null,
      isWritable: true,
    },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    cycleTokenAccount: {
      value: input.cycleTokenAccount ?? null,
      isWritable: true,
    },
    organizerTokenAccount: {
      value: input.organizerTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    recipient: { value: input.recipient ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.organizerAccount.value) {
    accounts.organizerAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 114, 103, 97, 110, 105, 122, 101, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.organizer.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.organizer),
      getAccountMeta(accounts.cycle),
      getAccountMeta(accounts.organizerAccount),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.cycleTokenAccount),
      getAccountMeta(accounts.organizerTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseCycleInstructionDataEncoder().encode({}),
  } as CloseCycleInstruction<
    TProgramAddress,
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountMemberAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CloseCycleInput<
  TAccountOrganizer extends string = string,
  TAccountCycle extends string = string,
  TAccountOrganizerAccount extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountCycleTokenAccount extends string = string,
  TAccountOrganizerTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountRecipient extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  organizer: TransactionSigner<TAccountOrganizer>;
  cycle: Address<TAccountCycle>;
  organizerAccount: Address<TAccountOrganizerAccount>;
  memberAccount?: Address<TAccountMemberAccount>;
  cycleTokenAccount: Address<TAccountCycleTokenAccount>;
  organizerTokenAccount: Address<TAccountOrganizerTokenAccount>;
  recipientTokenAccount?: Address<TAccountRecipientTokenAccount>;
  recipient: Address<TAccountRecipient>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseCycleInstruction<
  TAccountOrganizer extends string,
  TAccountCycle extends string,
  TAccountOrganizerAccount extends string,
  TAccountMemberAccount extends string,
  TAccountCycleTokenAccount extends string,
  TAccountOrganizerTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountRecipient extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ROTOFI_PROGRAM_ADDRESS,
>(
  input: CloseCycleInput<
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountMemberAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseCycleInstruction<
  TProgramAddress,
  TAccountOrganizer,
  TAccountCycle,
  TAccountOrganizerAccount,
  TAccountMemberAccount,
  TAccountCycleTokenAccount,
  TAccountOrganizerTokenAccount,
  TAccountRecipientTokenAccount,
  TAccountRecipient,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ROTOFI_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    organizer: { value: input.organizer ?? null, isWritable: true },
    cycle: { value: input.cycle ?? null, isWritable: true },
    organizerAccount: {
      value: input.organizerAccount ?? null,
      isWritable: true,
    },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    cycleTokenAccount: {
      value: input.cycleTokenAccount ?? null,
      isWritable: true,
    },
    organizerTokenAccount: {
      value: input.organizerTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    recipient: { value: input.recipient ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.organizer),
      getAccountMeta(accounts.cycle),
      getAccountMeta(accounts.organizerAccount),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.cycleTokenAccount),
      getAccountMeta(accounts.organizerTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseCycleInstructionDataEncoder().encode({}),
  } as CloseCycleInstruction<
    TProgramAddress,
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountMemberAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCloseCycleInstruction<
  TProgram extends string = typeof ROTOFI_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    organizer: TAccountMetas[0];
    cycle: TAccountMetas[1];
    organizerAccount: TAccountMetas[2];
    memberAccount?: TAccountMetas[3] | undefined;
    cycleTokenAccount: TAccountMetas[4];
    organizerTokenAccount: TAccountMetas[5];
    recipientTokenAccount?: TAccountMetas[6] | undefined;
    recipient: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: CloseCycleInstructionData;
};

export function parseCloseCycleInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseCycleInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ROTOFI_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      organizer: getNextAccount(),
      cycle: getNextAccount(),
      organizerAccount: getNextAccount(),
      memberAccount: getNextOptionalAccount(),
      cycleTokenAccount: getNextAccount(),
      organizerTokenAccount: getNextAccount(),
      recipientTokenAccount: getNextOptionalAccount(),
      recipient: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseCycleInstructionDataDecoder().decode(instruction.data),
  };
}
