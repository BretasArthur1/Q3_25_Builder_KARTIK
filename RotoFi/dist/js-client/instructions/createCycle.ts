/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ROTOFI_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_CYCLE_DISCRIMINATOR = new Uint8Array([
  230, 206, 158, 192, 122, 193, 246, 254,
]);

export function getCreateCycleDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CYCLE_DISCRIMINATOR
  );
}

export type CreateCycleInstruction<
  TProgram extends string = typeof ROTOFI_PROGRAM_ADDRESS,
  TAccountOrganizer extends string | AccountMeta<string> = string,
  TAccountCycle extends string | AccountMeta<string> = string,
  TAccountOrganizerAccount extends string | AccountMeta<string> = string,
  TAccountCycleTokenAccount extends string | AccountMeta<string> = string,
  TAccountOrganizerTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOrganizer extends string
        ? WritableSignerAccount<TAccountOrganizer> &
            AccountSignerMeta<TAccountOrganizer>
        : TAccountOrganizer,
      TAccountCycle extends string
        ? WritableAccount<TAccountCycle>
        : TAccountCycle,
      TAccountOrganizerAccount extends string
        ? WritableAccount<TAccountOrganizerAccount>
        : TAccountOrganizerAccount,
      TAccountCycleTokenAccount extends string
        ? WritableAccount<TAccountCycleTokenAccount>
        : TAccountCycleTokenAccount,
      TAccountOrganizerTokenAccount extends string
        ? WritableAccount<TAccountOrganizerTokenAccount>
        : TAccountOrganizerTokenAccount,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateCycleInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountPerUser: bigint;
  maxParticipants: number;
  contributionInterval: bigint;
  contributionsPerPayout: number;
  roundCount: number;
  nonces: number;
};

export type CreateCycleInstructionDataArgs = {
  amountPerUser: number | bigint;
  maxParticipants: number;
  contributionInterval: number | bigint;
  contributionsPerPayout: number;
  roundCount: number;
  nonces: number;
};

export function getCreateCycleInstructionDataEncoder(): FixedSizeEncoder<CreateCycleInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountPerUser', getU64Encoder()],
      ['maxParticipants', getU8Encoder()],
      ['contributionInterval', getI64Encoder()],
      ['contributionsPerPayout', getU8Encoder()],
      ['roundCount', getU8Encoder()],
      ['nonces', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CYCLE_DISCRIMINATOR })
  );
}

export function getCreateCycleInstructionDataDecoder(): FixedSizeDecoder<CreateCycleInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountPerUser', getU64Decoder()],
    ['maxParticipants', getU8Decoder()],
    ['contributionInterval', getI64Decoder()],
    ['contributionsPerPayout', getU8Decoder()],
    ['roundCount', getU8Decoder()],
    ['nonces', getU8Decoder()],
  ]);
}

export function getCreateCycleInstructionDataCodec(): FixedSizeCodec<
  CreateCycleInstructionDataArgs,
  CreateCycleInstructionData
> {
  return combineCodec(
    getCreateCycleInstructionDataEncoder(),
    getCreateCycleInstructionDataDecoder()
  );
}

export type CreateCycleAsyncInput<
  TAccountOrganizer extends string = string,
  TAccountCycle extends string = string,
  TAccountOrganizerAccount extends string = string,
  TAccountCycleTokenAccount extends string = string,
  TAccountOrganizerTokenAccount extends string = string,
  TAccountTokenMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  organizer: TransactionSigner<TAccountOrganizer>;
  cycle?: Address<TAccountCycle>;
  organizerAccount?: Address<TAccountOrganizerAccount>;
  cycleTokenAccount?: Address<TAccountCycleTokenAccount>;
  organizerTokenAccount?: Address<TAccountOrganizerTokenAccount>;
  tokenMint: Address<TAccountTokenMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  amountPerUser: CreateCycleInstructionDataArgs['amountPerUser'];
  maxParticipants: CreateCycleInstructionDataArgs['maxParticipants'];
  contributionInterval: CreateCycleInstructionDataArgs['contributionInterval'];
  contributionsPerPayout: CreateCycleInstructionDataArgs['contributionsPerPayout'];
  roundCount: CreateCycleInstructionDataArgs['roundCount'];
  nonces: CreateCycleInstructionDataArgs['nonces'];
};

export async function getCreateCycleInstructionAsync<
  TAccountOrganizer extends string,
  TAccountCycle extends string,
  TAccountOrganizerAccount extends string,
  TAccountCycleTokenAccount extends string,
  TAccountOrganizerTokenAccount extends string,
  TAccountTokenMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ROTOFI_PROGRAM_ADDRESS,
>(
  input: CreateCycleAsyncInput<
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateCycleInstruction<
    TProgramAddress,
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? ROTOFI_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    organizer: { value: input.organizer ?? null, isWritable: true },
    cycle: { value: input.cycle ?? null, isWritable: true },
    organizerAccount: {
      value: input.organizerAccount ?? null,
      isWritable: true,
    },
    cycleTokenAccount: {
      value: input.cycleTokenAccount ?? null,
      isWritable: true,
    },
    organizerTokenAccount: {
      value: input.organizerTokenAccount ?? null,
      isWritable: true,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.cycle.value) {
    accounts.cycle.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 121, 99, 108, 101])),
        getAddressEncoder().encode(expectAddress(accounts.organizer.value)),
        getU8Encoder().encode(expectSome(args.nonces)),
      ],
    });
  }
  if (!accounts.organizerAccount.value) {
    accounts.organizerAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 114, 103, 97, 110, 105, 122, 101, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.organizer.value)),
      ],
    });
  }
  if (!accounts.cycleTokenAccount.value) {
    accounts.cycleTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.cycle.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.organizerTokenAccount.value) {
    accounts.organizerTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.organizer.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.organizer),
      getAccountMeta(accounts.cycle),
      getAccountMeta(accounts.organizerAccount),
      getAccountMeta(accounts.cycleTokenAccount),
      getAccountMeta(accounts.organizerTokenAccount),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateCycleInstructionDataEncoder().encode(
      args as CreateCycleInstructionDataArgs
    ),
  } as CreateCycleInstruction<
    TProgramAddress,
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type CreateCycleInput<
  TAccountOrganizer extends string = string,
  TAccountCycle extends string = string,
  TAccountOrganizerAccount extends string = string,
  TAccountCycleTokenAccount extends string = string,
  TAccountOrganizerTokenAccount extends string = string,
  TAccountTokenMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  organizer: TransactionSigner<TAccountOrganizer>;
  cycle: Address<TAccountCycle>;
  organizerAccount: Address<TAccountOrganizerAccount>;
  cycleTokenAccount: Address<TAccountCycleTokenAccount>;
  organizerTokenAccount: Address<TAccountOrganizerTokenAccount>;
  tokenMint: Address<TAccountTokenMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  amountPerUser: CreateCycleInstructionDataArgs['amountPerUser'];
  maxParticipants: CreateCycleInstructionDataArgs['maxParticipants'];
  contributionInterval: CreateCycleInstructionDataArgs['contributionInterval'];
  contributionsPerPayout: CreateCycleInstructionDataArgs['contributionsPerPayout'];
  roundCount: CreateCycleInstructionDataArgs['roundCount'];
  nonces: CreateCycleInstructionDataArgs['nonces'];
};

export function getCreateCycleInstruction<
  TAccountOrganizer extends string,
  TAccountCycle extends string,
  TAccountOrganizerAccount extends string,
  TAccountCycleTokenAccount extends string,
  TAccountOrganizerTokenAccount extends string,
  TAccountTokenMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ROTOFI_PROGRAM_ADDRESS,
>(
  input: CreateCycleInput<
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateCycleInstruction<
  TProgramAddress,
  TAccountOrganizer,
  TAccountCycle,
  TAccountOrganizerAccount,
  TAccountCycleTokenAccount,
  TAccountOrganizerTokenAccount,
  TAccountTokenMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? ROTOFI_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    organizer: { value: input.organizer ?? null, isWritable: true },
    cycle: { value: input.cycle ?? null, isWritable: true },
    organizerAccount: {
      value: input.organizerAccount ?? null,
      isWritable: true,
    },
    cycleTokenAccount: {
      value: input.cycleTokenAccount ?? null,
      isWritable: true,
    },
    organizerTokenAccount: {
      value: input.organizerTokenAccount ?? null,
      isWritable: true,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.organizer),
      getAccountMeta(accounts.cycle),
      getAccountMeta(accounts.organizerAccount),
      getAccountMeta(accounts.cycleTokenAccount),
      getAccountMeta(accounts.organizerTokenAccount),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateCycleInstructionDataEncoder().encode(
      args as CreateCycleInstructionDataArgs
    ),
  } as CreateCycleInstruction<
    TProgramAddress,
    TAccountOrganizer,
    TAccountCycle,
    TAccountOrganizerAccount,
    TAccountCycleTokenAccount,
    TAccountOrganizerTokenAccount,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCreateCycleInstruction<
  TProgram extends string = typeof ROTOFI_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    organizer: TAccountMetas[0];
    cycle: TAccountMetas[1];
    organizerAccount: TAccountMetas[2];
    cycleTokenAccount: TAccountMetas[3];
    organizerTokenAccount: TAccountMetas[4];
    tokenMint: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
  };
  data: CreateCycleInstructionData;
};

export function parseCreateCycleInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateCycleInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      organizer: getNextAccount(),
      cycle: getNextAccount(),
      organizerAccount: getNextAccount(),
      cycleTokenAccount: getNextAccount(),
      organizerTokenAccount: getNextAccount(),
      tokenMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateCycleInstructionDataDecoder().decode(instruction.data),
  };
}
