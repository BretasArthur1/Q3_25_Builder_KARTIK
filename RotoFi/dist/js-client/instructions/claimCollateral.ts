/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ROTOFI_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_COLLATERAL_DISCRIMINATOR = new Uint8Array([
  55, 78, 194, 172, 196, 18, 230, 252,
]);

export function getClaimCollateralDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_COLLATERAL_DISCRIMINATOR
  );
}

export type ClaimCollateralInstruction<
  TProgram extends string = typeof ROTOFI_PROGRAM_ADDRESS,
  TAccountClaimer extends string | AccountMeta<string> = string,
  TAccountCycle extends string | AccountMeta<string> = string,
  TAccountMemberAccount extends string | AccountMeta<string> = string,
  TAccountClaimerTokenAccount extends string | AccountMeta<string> = string,
  TAccountCycleTokenAccount extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TAccountOrganizer extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountClaimer extends string
        ? WritableSignerAccount<TAccountClaimer> &
            AccountSignerMeta<TAccountClaimer>
        : TAccountClaimer,
      TAccountCycle extends string
        ? WritableAccount<TAccountCycle>
        : TAccountCycle,
      TAccountMemberAccount extends string
        ? WritableAccount<TAccountMemberAccount>
        : TAccountMemberAccount,
      TAccountClaimerTokenAccount extends string
        ? WritableAccount<TAccountClaimerTokenAccount>
        : TAccountClaimerTokenAccount,
      TAccountCycleTokenAccount extends string
        ? WritableAccount<TAccountCycleTokenAccount>
        : TAccountCycleTokenAccount,
      TAccountMember extends string
        ? ReadonlyAccount<TAccountMember>
        : TAccountMember,
      TAccountOrganizer extends string
        ? ReadonlyAccount<TAccountOrganizer>
        : TAccountOrganizer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimCollateralInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimCollateralInstructionDataArgs = {};

export function getClaimCollateralInstructionDataEncoder(): FixedSizeEncoder<ClaimCollateralInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_COLLATERAL_DISCRIMINATOR })
  );
}

export function getClaimCollateralInstructionDataDecoder(): FixedSizeDecoder<ClaimCollateralInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimCollateralInstructionDataCodec(): FixedSizeCodec<
  ClaimCollateralInstructionDataArgs,
  ClaimCollateralInstructionData
> {
  return combineCodec(
    getClaimCollateralInstructionDataEncoder(),
    getClaimCollateralInstructionDataDecoder()
  );
}

export type ClaimCollateralInput<
  TAccountClaimer extends string = string,
  TAccountCycle extends string = string,
  TAccountMemberAccount extends string = string,
  TAccountClaimerTokenAccount extends string = string,
  TAccountCycleTokenAccount extends string = string,
  TAccountMember extends string = string,
  TAccountOrganizer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  claimer: TransactionSigner<TAccountClaimer>;
  cycle: Address<TAccountCycle>;
  memberAccount: Address<TAccountMemberAccount>;
  claimerTokenAccount: Address<TAccountClaimerTokenAccount>;
  cycleTokenAccount: Address<TAccountCycleTokenAccount>;
  member: Address<TAccountMember>;
  organizer: Address<TAccountOrganizer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export function getClaimCollateralInstruction<
  TAccountClaimer extends string,
  TAccountCycle extends string,
  TAccountMemberAccount extends string,
  TAccountClaimerTokenAccount extends string,
  TAccountCycleTokenAccount extends string,
  TAccountMember extends string,
  TAccountOrganizer extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof ROTOFI_PROGRAM_ADDRESS,
>(
  input: ClaimCollateralInput<
    TAccountClaimer,
    TAccountCycle,
    TAccountMemberAccount,
    TAccountClaimerTokenAccount,
    TAccountCycleTokenAccount,
    TAccountMember,
    TAccountOrganizer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimCollateralInstruction<
  TProgramAddress,
  TAccountClaimer,
  TAccountCycle,
  TAccountMemberAccount,
  TAccountClaimerTokenAccount,
  TAccountCycleTokenAccount,
  TAccountMember,
  TAccountOrganizer,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ROTOFI_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    claimer: { value: input.claimer ?? null, isWritable: true },
    cycle: { value: input.cycle ?? null, isWritable: true },
    memberAccount: { value: input.memberAccount ?? null, isWritable: true },
    claimerTokenAccount: {
      value: input.claimerTokenAccount ?? null,
      isWritable: true,
    },
    cycleTokenAccount: {
      value: input.cycleTokenAccount ?? null,
      isWritable: true,
    },
    member: { value: input.member ?? null, isWritable: false },
    organizer: { value: input.organizer ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.claimer),
      getAccountMeta(accounts.cycle),
      getAccountMeta(accounts.memberAccount),
      getAccountMeta(accounts.claimerTokenAccount),
      getAccountMeta(accounts.cycleTokenAccount),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.organizer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getClaimCollateralInstructionDataEncoder().encode({}),
  } as ClaimCollateralInstruction<
    TProgramAddress,
    TAccountClaimer,
    TAccountCycle,
    TAccountMemberAccount,
    TAccountClaimerTokenAccount,
    TAccountCycleTokenAccount,
    TAccountMember,
    TAccountOrganizer,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedClaimCollateralInstruction<
  TProgram extends string = typeof ROTOFI_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    claimer: TAccountMetas[0];
    cycle: TAccountMetas[1];
    memberAccount: TAccountMetas[2];
    claimerTokenAccount: TAccountMetas[3];
    cycleTokenAccount: TAccountMetas[4];
    member: TAccountMetas[5];
    organizer: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
  };
  data: ClaimCollateralInstructionData;
};

export function parseClaimCollateralInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimCollateralInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      claimer: getNextAccount(),
      cycle: getNextAccount(),
      memberAccount: getNextAccount(),
      claimerTokenAccount: getNextAccount(),
      cycleTokenAccount: getNextAccount(),
      member: getNextAccount(),
      organizer: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getClaimCollateralInstructionDataDecoder().decode(instruction.data),
  };
}
