/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { ROTOFI_PROGRAM_ADDRESS } from '../programs';

/** CycleNotActive: Cycle is not active */
export const ROTOFI_ERROR__CYCLE_NOT_ACTIVE = 0x1770; // 6000
/** CycleFull: Cycle is full */
export const ROTOFI_ERROR__CYCLE_FULL = 0x1771; // 6001
/** InvalidPayoutOrder: Invalid payout order */
export const ROTOFI_ERROR__INVALID_PAYOUT_ORDER = 0x1772; // 6002
/** NotInPayoutOrder: Not in payout order */
export const ROTOFI_ERROR__NOT_IN_PAYOUT_ORDER = 0x1773; // 6003
/** InvalidCycle: Invalid cycle */
export const ROTOFI_ERROR__INVALID_CYCLE = 0x1774; // 6004
/** InvalidMember: Invalid member */
export const ROTOFI_ERROR__INVALID_MEMBER = 0x1775; // 6005
/** MemberNotActive: Member is not active */
export const ROTOFI_ERROR__MEMBER_NOT_ACTIVE = 0x1776; // 6006
/** ContributionLate: Contribution is late */
export const ROTOFI_ERROR__CONTRIBUTION_LATE = 0x1777; // 6007
/** ArithmeticOverflow: Arithmetic overflow */
export const ROTOFI_ERROR__ARITHMETIC_OVERFLOW = 0x1778; // 6008
/** ArithmeticUnderflow: Arithmetic underflow */
export const ROTOFI_ERROR__ARITHMETIC_UNDERFLOW = 0x1779; // 6009
/** PayoutTooEarly: Payout too early */
export const ROTOFI_ERROR__PAYOUT_TOO_EARLY = 0x177a; // 6010
/** CycleComplete: Cycle is complete */
export const ROTOFI_ERROR__CYCLE_COMPLETE = 0x177b; // 6011
/** InvalidPayoutRecipient: Invalid payout recipient */
export const ROTOFI_ERROR__INVALID_PAYOUT_RECIPIENT = 0x177c; // 6012
/** CycleAlreadyStarted: Cycle has already started */
export const ROTOFI_ERROR__CYCLE_ALREADY_STARTED = 0x177d; // 6013
/** TooEarlyToReport: Too early to report default */
export const ROTOFI_ERROR__TOO_EARLY_TO_REPORT = 0x177e; // 6014
/** MemberNotDefaulted: Member has not defaulted */
export const ROTOFI_ERROR__MEMBER_NOT_DEFAULTED = 0x177f; // 6015
/** MemberStillActive: Member is still active */
export const ROTOFI_ERROR__MEMBER_STILL_ACTIVE = 0x1780; // 6016
/** TooManyCycles: Too many cycles */
export const ROTOFI_ERROR__TOO_MANY_CYCLES = 0x1781; // 6017
/** InvalidStakeAmount: Invalid stake amount */
export const ROTOFI_ERROR__INVALID_STAKE_AMOUNT = 0x1782; // 6018
/** CycleStillActive: Cycle is still active */
export const ROTOFI_ERROR__CYCLE_STILL_ACTIVE = 0x1783; // 6019
/** InvalidTokenMint: Invalid token mint */
export const ROTOFI_ERROR__INVALID_TOKEN_MINT = 0x1784; // 6020
/** InsufficientStake: Insufficient stake amount */
export const ROTOFI_ERROR__INSUFFICIENT_STAKE = 0x1785; // 6021
/** InvalidMemberCount: Invalid member count (must be between 2 and 10) */
export const ROTOFI_ERROR__INVALID_MEMBER_COUNT = 0x1786; // 6022
/** UnauthorizedClaimer: Unauthorized claimer */
export const ROTOFI_ERROR__UNAUTHORIZED_CLAIMER = 0x1787; // 6023
/** InvalidAmountPerUser: Invalid amount per user */
export const ROTOFI_ERROR__INVALID_AMOUNT_PER_USER = 0x1788; // 6024
/** InvalidContributionInterval: Invalid contribution interval */
export const ROTOFI_ERROR__INVALID_CONTRIBUTION_INTERVAL = 0x1789; // 6025
/** InvalidRoundCount: Invalid round count */
export const ROTOFI_ERROR__INVALID_ROUND_COUNT = 0x178a; // 6026
/** InvalidContributionsPerPayout: Invalid contributions per payout */
export const ROTOFI_ERROR__INVALID_CONTRIBUTIONS_PER_PAYOUT = 0x178b; // 6027
/** AlreadyContributedThisRound: Member has already contributed this round */
export const ROTOFI_ERROR__ALREADY_CONTRIBUTED_THIS_ROUND = 0x178c; // 6028

export type RotofiError =
  | typeof ROTOFI_ERROR__ALREADY_CONTRIBUTED_THIS_ROUND
  | typeof ROTOFI_ERROR__ARITHMETIC_OVERFLOW
  | typeof ROTOFI_ERROR__ARITHMETIC_UNDERFLOW
  | typeof ROTOFI_ERROR__CONTRIBUTION_LATE
  | typeof ROTOFI_ERROR__CYCLE_ALREADY_STARTED
  | typeof ROTOFI_ERROR__CYCLE_COMPLETE
  | typeof ROTOFI_ERROR__CYCLE_FULL
  | typeof ROTOFI_ERROR__CYCLE_NOT_ACTIVE
  | typeof ROTOFI_ERROR__CYCLE_STILL_ACTIVE
  | typeof ROTOFI_ERROR__INSUFFICIENT_STAKE
  | typeof ROTOFI_ERROR__INVALID_AMOUNT_PER_USER
  | typeof ROTOFI_ERROR__INVALID_CONTRIBUTION_INTERVAL
  | typeof ROTOFI_ERROR__INVALID_CONTRIBUTIONS_PER_PAYOUT
  | typeof ROTOFI_ERROR__INVALID_CYCLE
  | typeof ROTOFI_ERROR__INVALID_MEMBER
  | typeof ROTOFI_ERROR__INVALID_MEMBER_COUNT
  | typeof ROTOFI_ERROR__INVALID_PAYOUT_ORDER
  | typeof ROTOFI_ERROR__INVALID_PAYOUT_RECIPIENT
  | typeof ROTOFI_ERROR__INVALID_ROUND_COUNT
  | typeof ROTOFI_ERROR__INVALID_STAKE_AMOUNT
  | typeof ROTOFI_ERROR__INVALID_TOKEN_MINT
  | typeof ROTOFI_ERROR__MEMBER_NOT_ACTIVE
  | typeof ROTOFI_ERROR__MEMBER_NOT_DEFAULTED
  | typeof ROTOFI_ERROR__MEMBER_STILL_ACTIVE
  | typeof ROTOFI_ERROR__NOT_IN_PAYOUT_ORDER
  | typeof ROTOFI_ERROR__PAYOUT_TOO_EARLY
  | typeof ROTOFI_ERROR__TOO_EARLY_TO_REPORT
  | typeof ROTOFI_ERROR__TOO_MANY_CYCLES
  | typeof ROTOFI_ERROR__UNAUTHORIZED_CLAIMER;

let rotofiErrorMessages: Record<RotofiError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  rotofiErrorMessages = {
    [ROTOFI_ERROR__ALREADY_CONTRIBUTED_THIS_ROUND]: `Member has already contributed this round`,
    [ROTOFI_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [ROTOFI_ERROR__ARITHMETIC_UNDERFLOW]: `Arithmetic underflow`,
    [ROTOFI_ERROR__CONTRIBUTION_LATE]: `Contribution is late`,
    [ROTOFI_ERROR__CYCLE_ALREADY_STARTED]: `Cycle has already started`,
    [ROTOFI_ERROR__CYCLE_COMPLETE]: `Cycle is complete`,
    [ROTOFI_ERROR__CYCLE_FULL]: `Cycle is full`,
    [ROTOFI_ERROR__CYCLE_NOT_ACTIVE]: `Cycle is not active`,
    [ROTOFI_ERROR__CYCLE_STILL_ACTIVE]: `Cycle is still active`,
    [ROTOFI_ERROR__INSUFFICIENT_STAKE]: `Insufficient stake amount`,
    [ROTOFI_ERROR__INVALID_AMOUNT_PER_USER]: `Invalid amount per user`,
    [ROTOFI_ERROR__INVALID_CONTRIBUTION_INTERVAL]: `Invalid contribution interval`,
    [ROTOFI_ERROR__INVALID_CONTRIBUTIONS_PER_PAYOUT]: `Invalid contributions per payout`,
    [ROTOFI_ERROR__INVALID_CYCLE]: `Invalid cycle`,
    [ROTOFI_ERROR__INVALID_MEMBER]: `Invalid member`,
    [ROTOFI_ERROR__INVALID_MEMBER_COUNT]: `Invalid member count (must be between 2 and 10)`,
    [ROTOFI_ERROR__INVALID_PAYOUT_ORDER]: `Invalid payout order`,
    [ROTOFI_ERROR__INVALID_PAYOUT_RECIPIENT]: `Invalid payout recipient`,
    [ROTOFI_ERROR__INVALID_ROUND_COUNT]: `Invalid round count`,
    [ROTOFI_ERROR__INVALID_STAKE_AMOUNT]: `Invalid stake amount`,
    [ROTOFI_ERROR__INVALID_TOKEN_MINT]: `Invalid token mint`,
    [ROTOFI_ERROR__MEMBER_NOT_ACTIVE]: `Member is not active`,
    [ROTOFI_ERROR__MEMBER_NOT_DEFAULTED]: `Member has not defaulted`,
    [ROTOFI_ERROR__MEMBER_STILL_ACTIVE]: `Member is still active`,
    [ROTOFI_ERROR__NOT_IN_PAYOUT_ORDER]: `Not in payout order`,
    [ROTOFI_ERROR__PAYOUT_TOO_EARLY]: `Payout too early`,
    [ROTOFI_ERROR__TOO_EARLY_TO_REPORT]: `Too early to report default`,
    [ROTOFI_ERROR__TOO_MANY_CYCLES]: `Too many cycles`,
    [ROTOFI_ERROR__UNAUTHORIZED_CLAIMER]: `Unauthorized claimer`,
  };
}

export function getRotofiErrorMessage(code: RotofiError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (rotofiErrorMessages as Record<RotofiError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isRotofiError<TProgramErrorCode extends RotofiError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    ROTOFI_PROGRAM_ADDRESS,
    code
  );
}
